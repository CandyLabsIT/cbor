/*
 * Package : Cbor
 * Author : S. Hamblett <steve.hamblett@linux.com>
 * Date   : 12/12/2016
 * Copyright :  S.Hamblett
 */

import 'dart:convert';

import 'package:cbor/cbor.dart';
import 'package:meta/meta.dart';

import '../encoder/sink.dart';
import '../utils/info.dart';
import 'internal.dart';
import '../utils/utils.dart';

/// A CBOR string encoded in UTF-8.
abstract class CborString extends CborValue {
  const factory CborString(String string, {List<int> tags}) = _CborStringImpl;

  /// <nodoc>
  @internal
  void verify();
}

class _CborStringImpl with CborValueMixin implements CborString {
  const _CborStringImpl(this._string, {this.tags = const []});

  final String _string;

  @override
  void verify() {}

  @override
  String toString() => _string;
  @override
  bool operator ==(Object other) =>
      other is CborString && _string == other.toString();
  @override
  int get hashCode => null.hashCode;
  @override
  final List<int> tags;

  @override
  Object? toObjectInternal(Set<Object> cyclicCheck, ToObjectOptions o) {
    return toString();
  }

  @override
  void encode(EncodeSink sink) {
    CborEncodeDefiniteLengthString(this).encode(sink);
  }

  @override
  Object? toJsonInternal(Set<Object> cyclicCheck, ToJsonOptions o) {
    return toString();
  }
}

/// Use this to force the [CborEncoder] to encode an indefinite length string.
///
/// This is never generated by decoder.
abstract class CborEncodeIndefiniteLengthString extends CborValue {
  const factory CborEncodeIndefiniteLengthString(List<String> items,
      {List<int> tags}) = _CborEncodeIndefiniteLengthStringImpl;
}

class _CborEncodeIndefiniteLengthStringImpl
    with CborValueMixin
    implements CborEncodeIndefiniteLengthString {
  const _CborEncodeIndefiniteLengthStringImpl(this.items,
      {this.tags = const []});

  final List<String> items;
  @override
  final List<int> tags;

  @override
  Object? toObjectInternal(Set<Object> cyclicCheck, ToObjectOptions o) {
    return CborString(items.join(), tags: tags)
        .toObjectInternal(cyclicCheck, o);
  }

  @override
  void encode(EncodeSink sink) {
    sink.addTags(tags);

    sink.addHeaderInfo(3, Info.indefiniteLength);

    for (final value in items) {
      CborEncodeDefiniteLengthString(CborString(value)).encode(sink);
    }

    (const Break()).encode(sink);
  }

  @override
  Object? toJsonInternal(Set<Object> cyclicCheck, ToJsonOptions o) {
    return CborString(items.join(), tags: tags).toJsonInternal(cyclicCheck, o);
  }
}

/// Use this to force the [CborEncoder] to encode an definite length string.
///
/// This is never generated by decoder.
abstract class CborEncodeDefiniteLengthString extends CborValue {
  const factory CborEncodeDefiniteLengthString(CborString input) =
      _CborEncodeDefiniteLengthStringImpl;
}

class _CborEncodeDefiniteLengthStringImpl
    with CborValueMixin
    implements CborEncodeDefiniteLengthString {
  const _CborEncodeDefiniteLengthStringImpl(this.inner);

  final CborString inner;

  @override
  Object? toObjectInternal(Set<Object> cyclicCheck, ToObjectOptions o) {
    return inner.toObjectInternal(cyclicCheck, o);
  }

  @override
  Object? toJsonInternal(Set<Object> cyclicCheck, ToJsonOptions o) {
    return inner.toJsonInternal(cyclicCheck, o);
  }

  @override
  void encode(EncodeSink sink) {
    final bytes = utf8.encode(inner.toString());

    sink.addTags(tags);

    sink.addHeaderInfo(3, Info.int(bytes.length));

    sink.add(bytes);
  }

  @override
  List<int> get tags => inner.tags;
}

/// A CBOR string which encodes a datetime.
abstract class CborDateTimeString extends CborString implements CborDateTime {
  /// Create a date time string.
  ///
  /// If [timeZoneOffset] is not provided, the timezone for [value] is used.
  ///
  /// This will ommit second fraction if zero, and trim it depending on the
  /// resolution.
  factory CborDateTimeString(
    DateTime value, {
    Duration? timeZoneOffset,
    List<int> tags,
  }) = _CborDateTimeStringImpl;

  factory CborDateTimeString.fromString(
    String str, {
    List<int> tags,
  }) = _CborDateTimeStringImpl.fromString;
}

class _CborDateTimeStringImpl extends _CborStringImpl
    implements CborDateTimeString {
  _CborDateTimeStringImpl(
    DateTime value, {
    Duration? timeZoneOffset,
    List<int> tags = const [CborTag.dateTimeString],
  })  : _datetime = value,
        super(value.toInternetIso8601String(timeZoneOffset), tags: tags);

  _CborDateTimeStringImpl.fromString(
    String str, {
    List<int> tags = const [CborTag.dateTimeString],
  }) : super(str, tags: tags);

  DateTime? _datetime;

  @override
  Object? toObjectInternal(Set<Object> cyclicCheck, ToObjectOptions o) {
    if (o.parseDateTime) {
      return toDateTime();
    } else {
      return toString();
    }
  }

  @override
  void verify() {
    _datetime ??= DateTime.parse(toString());
  }

  @override
  DateTime toDateTime() {
    verify();
    return _datetime!;
  }
}

/// A CBOR string containing URI.
abstract class CborUri extends CborString {
  factory CborUri.fromString(String value, {List<int> tags}) =
      _CborUriImpl.fromString;

  factory CborUri(Uri value, {List<int> tags}) = _CborUriImpl;

  /// Parse the URI, may throw [FormatException] if the URI is not valid.
  Uri parse();
}

class _CborUriImpl extends _CborStringImpl implements CborUri {
  _CborUriImpl.fromString(
    String value, {
    List<int> tags = const [CborTag.uri],
  }) : super(value, tags: tags);

  _CborUriImpl(
    Uri value, {
    List<int> tags = const [CborTag.uri],
  })  : _value = value,
        super(value.toString(), tags: tags);

  Uri? _value;

  @override
  Object? toObjectInternal(Set<Object> cyclicCheck, ToObjectOptions o) {
    if (o.parseUri) {
      return parse();
    } else {
      return toString();
    }
  }

  @override
  void verify() {
    _value ??= Uri.parse(toString());
  }

  @override
  Uri parse() {
    verify();
    return _value!;
  }
}

/// A CBOR string containing a base 64 value.
abstract class CborBase64 extends CborString {
  factory CborBase64.fromString(String value, {List<int> tags}) =
      _CborBase64Impl.fromString;

  factory CborBase64.encode(List<int> bytes, {List<int> tags}) =
      _CborBase64Impl.encode;

  List<int> decode();
}

class _CborBase64Impl extends _CborStringImpl implements CborBase64 {
  _CborBase64Impl.fromString(
    String value, {
    List<int> tags = const [CborTag.base64],
  }) : super(value, tags: tags);

  _CborBase64Impl.encode(
    List<int> bytes, {
    List<int> tags = const [CborTag.base64],
  })  : _value = bytes,
        super(base64.encode(bytes), tags: tags);

  List<int>? _value;

  @override
  Object? toObjectInternal(Set<Object> cyclicCheck, ToObjectOptions o) {
    if (o.decodeBase64) {
      return decode();
    } else {
      return toString();
    }
  }

  @override
  void verify() {
    _value ??= base64.decode(base64.normalize(toString()));
  }

  @override
  List<int> decode() {
    verify();
    return _value!;
  }
}

/// A CBOR string containing a base 64 url safe value.
abstract class CborBase64Url extends CborString {
  factory CborBase64Url.fromString(String value, {List<int> tags}) =
      _CborBase64UrlImpl.fromString;

  factory CborBase64Url.encode(List<int> bytes, {List<int> tags}) =
      _CborBase64UrlImpl.encode;

  /// Use [Base64Codec.urlSafe] to decode.
  List<int> decode();
}

class _CborBase64UrlImpl extends _CborStringImpl implements CborBase64Url {
  _CborBase64UrlImpl.fromString(
    String value, {
    List<int> tags = const [CborTag.base64Url],
  }) : super(value, tags: tags);

  _CborBase64UrlImpl.encode(
    List<int> bytes, {
    List<int> tags = const [CborTag.base64Url],
  })  : _value = bytes,
        super(base64Url.encode(bytes), tags: tags);

  List<int>? _value;

  @override
  Object? toObjectInternal(Set<Object> cyclicCheck, ToObjectOptions o) {
    if (o.decodeBase64) {
      return decode();
    } else {
      return toString();
    }
  }

  @override
  void verify() {
    _value ??= base64Url.decode(base64Url.normalize(toString()));
  }

  @override
  List<int> decode() {
    verify();
    return _value!;
  }
}

/// A CBOR string containing a regular expression.
///
/// Does not provide any additional functionality currently.
abstract class CborRegex extends CborString {
  factory CborRegex.fromString(String data, {List<int> tags}) =
      _CborRegexImpl.fromString;
}

class _CborRegexImpl extends _CborStringImpl implements CborRegex {
  _CborRegexImpl.fromString(
    String data, {
    List<int> tags = const [CborTag.regex],
  }) : super(data, tags: tags);
}

/// A CBOR string containing a regular expression.
///
/// Does not provide any additional functionality currently.
abstract class CborMime extends CborString {
  factory CborMime.fromString(String data, {List<int> tags}) =
      _CborMimeImpl.fromString;
}

class _CborMimeImpl extends _CborStringImpl implements CborMime {
  _CborMimeImpl.fromString(
    String data, {
    List<int> tags = const [CborTag.mime],
  }) : super(data, tags: tags);
}
